#!/bin/bash
#
# ANSI Color Display Script
# Demonstrates terminal 256 colors
# Usage: rgb-24bit
#

# Text formatting constants
BOLD=$(printf '\033[1m')
DIM=$(printf '\033[2m')
ITALIC=$(printf '\033[3m')
UNDERLINE=$(printf '\033[4m')
BLINK=$(printf '\033[5m')
REVERSE=$(printf '\033[7m')
HIDDEN=$(printf '\033[8m')
STRIKETHROUGH=$(printf '\033[9m')
RESET=$(printf '\033[0m')

# Header display function
display_header() {
    printf "\n%s%s%s\n" "${BOLD}" "$1" "${RESET}"
    printf "%s\n" "$(printf '%0.s=' $(seq 1 ${#1}))"
}

##############################
# RGB-24bit COLORS SECTION
##############################

# Function to determine if an RGB color is light or dark
is_light_rgb() {
    local r=$1
    local g=$2
    local b=$3

    # Use a basic brightness formula to determine text contrast
    # Formula: (0.299*R + 0.587*G + 0.114*B)
    local brightness=$(( (299*r + 587*g + 114*b) / 1000 ))

    if [ $brightness -ge 128 ]; then
        return 0  # Light color, use black text
    else
        return 1  # Dark color, use white text
    fi
}

# RGB color samples - primary and secondary colors
printf "%sPRIMARY AND SECONDARY RGB COLORS:%s\n\n" "${BOLD}" "${RESET}"

# Array of common colors with their RGB values and names
declare -a colors=(
    "255 0 0 Red"
    "0 255 0 Green"
    "0 0 255 Blue"
    "255 255 0 Yellow"
    "255 0 255 Magenta"
    "0 255 255 Cyan"
    "255 255 255 White"
    "0 0 0 Black"
    "128 128 128 Gray"
    "128 0 0 Dark Red"
    "0 128 0 Dark Green"
    "0 0 128 Dark Blue"
    "128 128 0 Olive"
    "128 0 128 Purple"
    "0 128 128 Teal"
    "192 192 192 Silver"
)

# Display RGB colors with their values
for color in "${colors[@]}"; do
    read -r r g b name <<< "$color"

    if is_light_rgb $r $g $b; then
        # Light background, use black text
        printf "\033[48;2;%d;%d;%dm\033[30m RGB(%3d,%3d,%3d) %-10s \033[0m " $r $g $b $r $g $b "$name"
    else
        # Dark background, use white text
        printf "\033[48;2;%d;%d;%dm\033[97m RGB(%3d,%3d,%3d) %-10s \033[0m " $r $g $b $r $g $b "$name"
    fi

    # New line every 2 colors
    if [ $(( (i + 1) % 2 )) -eq 0 ]; then
        echo
    fi
    i=$((i+1))
done
echo

# RGB color gradients
printf "\n%sRGB COLOR GRADIENTS:%s\n\n" "${BOLD}" "${RESET}"

# Red to Blue gradient (horizontal)
printf "%sRed to Blue Gradient (Horizontal):%s\n" "${BOLD}" "${RESET}"
for i in {0..50}; do
    r=$((255 - i * 255 / 50))
    b=$((i * 255 / 50))
    g=0

    if is_light_rgb $r $g $b; then
        printf "\033[48;2;%d;%d;%dm\033[30m  \033[0m" $r $g $b
    else
        printf "\033[48;2;%d;%d;%dm\033[97m  \033[0m" $r $g $b
    fi
done
echo

# Green to Yellow gradient (horizontal)
printf "\n%sGreen to Yellow Gradient (Horizontal):%s\n" "${BOLD}" "${RESET}"
for i in {0..50}; do
    g=255
    r=$((i * 255 / 50))
    b=0

    if is_light_rgb $r $g $b; then
        printf "\033[48;2;%d;%d;%dm\033[30m  \033[0m" $r $g $b
    else
        printf "\033[48;2;%d;%d;%dm\033[97m  \033[0m" $r $g $b
    fi
done
echo

# Blue to Cyan gradient (horizontal)
printf "\n%sBlue to Cyan Gradient (Horizontal):%s\n" "${BOLD}" "${RESET}"
for i in {0..50}; do
    b=255
    g=$((i * 255 / 50))
    r=0

    if is_light_rgb $r $g $b; then
        printf "\033[48;2;%d;%d;%dm\033[30m  \033[0m" $r $g $b
    else
        printf "\033[48;2;%d;%d;%dm\033[97m  \033[0m" $r $g $b
    fi
done
echo

# Black to White gradient (grayscale)
printf "\n%sBlack to White Gradient (Grayscale):%s\n" "${BOLD}" "${RESET}"
for i in {0..50}; do
    val=$((i * 255 / 50))
    r=$val
    g=$val
    b=$val

    if is_light_rgb $r $g $b; then
        printf "\033[48;2;%d;%d;%dm\033[30m  \033[0m" $r $g $b
    else
        printf "\033[48;2;%d;%d;%dm\033[97m  \033[0m" $r $g $b
    fi
done
echo

# Rainbow gradient
printf "\n%sRainbow Gradient:%s\n" "${BOLD}" "${RESET}"
for i in {0..50}; do
    if [ $i -lt 9 ]; then  # Red to Yellow
        r=255
        g=$((i * 255 / 8))
        b=0
    elif [ $i -lt 17 ]; then  # Yellow to Green
        r=$((255 - (i - 8) * 255 / 8))
        g=255
        b=0
    elif [ $i -lt 26 ]; then  # Green to Cyan
        r=0
        g=255
        b=$(((i - 17) * 255 / 8))
    elif [ $i -lt 34 ]; then  # Cyan to Blue
        r=0
        g=$((255 - (i - 25) * 255 / 8))
        b=255
    elif [ $i -lt 42 ]; then  # Blue to Magenta
        r=$(((i - 34) * 255 / 8))
        g=0
        b=255
    else  # Magenta to Red
        r=255
        g=0
        b=$((255 - (i - 42) * 255 / 9))
    fi

    if is_light_rgb $r $g $b; then
        printf "\033[48;2;%d;%d;%dm\033[30m  \033[0m" $r $g $b
    else
        printf "\033[48;2;%d;%d;%dm\033[97m  \033[0m" $r $g $b
    fi
done
echo

# Text with RGB color gradient
printf "\n%sText with RGB Color Gradient:%s\n\n" "${BOLD}" "${RESET}"
text="This text demonstrates RGB color gradient capabilities"
len=${#text}

for (( i=0; i<len; i++ )); do
    char="${text:$i:1}"

    # Calculate gradient from blue to red
    r=$((i * 255 / len))
    b=$((255 - i * 255 / len))
    g=0

    # Print each character with its own color
    printf "\033[38;2;%d;%d;%dm%s\033[0m" $r $g $b "$char"
done
echo

##############################
# USAGE INSTRUCTIONS SECTION
##############################
printf "\n%sTEXT EFFECTS USAGE:%s\n" "${BOLD}" "${RESET}"
printf "  - Bold:          \\\\033[1m\n"
printf "  - Dim:           \\\\033[2m\n"
printf "  - Italic:        \\\\033[3m\n"
printf "  - Underline:     \\\\033[4m\n"
printf "  - Blink:         \\\\033[5m\n"
printf "  - Reverse:       \\\\033[7m\n"
printf "  - Hidden:        \\\\033[8m\n"
printf "  - Strikethrough: \\\\033[9m\n"
printf "  - Reset:         \\\\033[0m\n"

# Basic usage instructions
printf "\n%sRGB (24-BIT) COLOR MODE USAGE:%s\n" "${BOLD}" "${RESET}"
printf "  - Foreground: \\\\033[38;2;<R>;<G>;<B>m\n"
printf "  - Background: \\\\033[48;2;<R>;<G>;<B>m\n"
printf "  - Reset:      \\\\033[0m\n"


# Example
printf "\n%sCOMBINING COLORS WITH TEXT EFFECTS:%s\n" "${BOLD}" "${RESET}"
printf "   Example: printf \"\\\\033[38;2;255;0;0m\\\\033[48;2;0;255;0mRed text on green background\\\\033[0m\"\n"
printf "   Result: %s\n" "$(printf '\033[38;2;255;0;0m\033[48;2;0;255;0mRed text on green background\033[0m')"
printf "   Example: printf \"\\\\033[1m\\\\033[38;2;255;0;0m\\\\033[48;5;255;255;255mBold red on white background\\\\033[0m\"\n"
printf "   Result: %s\n" "$(printf '\033[1m\033[38;2;255;0;0m\033[48;2;255;255;255mBold red on white background\033[0m')"
printf "   Example: printf \"\\\\033[1m\\\\033[4m\\\\033[38;2;255;0;0mBold, Underlined Red Text\\\\033[0m\"\n"
printf "   Result: %s\n" "$(printf '\033[1m\033[4m\033[38;2;255;255;255mBold, Underlined Red Text\033[0m')"
printf "   Example: printf \"\\\\033[3m\\\\033[38;2;255;0;0mItalic Red Text\\\\033[0m\"\n"
printf "   Result: %s\n\n" "$(printf '\033[3m\033[38;2;255;0;0mItalic Red Text\033[0m')"
