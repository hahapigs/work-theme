#!/bin/bash
#
# author: hahapigs
#
# wttr - A command-line weather information client for wttr.in
# This script provides a convenient way to query weather information
# from wttr.in service with various formatting options.

set -e

# version
wttr_ver="0.01_2025-04-11"
# github
GITHUB_REPO_URL="https://github.com/hahapigs/work-theme"

# Configuration file paths
CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/wttr"
DEFAULT_CITY_FILE="${CONFIG_DIR}/default-city.txt"

# API base URL configuration
URL_v1="https://wttr.in"    # Standard wttr.in endpoint with full features
URL_v2="https://v2.wttr.in" # Alternative v2 endpoint with different formatting
URL_v3="https://v3.wttr.in" # Latest v3 endpoint with enhanced features

show_about()
{
echo -e "
About the

██╗    ██╗████████╗████████╗██████╗    ██╗███╗   ██╗
██║    ██║╚══██╔══╝╚══██╔══╝██╔══██╗   ██║████╗  ██║
██║ █╗ ██║   ██║      ██║   ██████╔╝   ██║██╔██╗ ██║
██║███╗██║   ██║      ██║   ██╔══██╗   ██║██║╚██╗██║
╚███╔███╔╝   ██║      ██║   ██║  ██║██╗██║██║ ╚████║
 ╚══╝╚══╝    ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝╚═╝  ╚═══╝
                                  script by hahapigs


This is a simple bash script to check weather condition
with the help of wttr.in. The script 'wttr' is under GPL3 License.

Source is available on Github: $GITHUB_REPO_URL
"
}

# Display help information
show_help() {
    echo -e "\033[1mwttr - Command-line weather client for wttr.in\033[0m"
    echo
    echo -e "\033[1mUsage:\033[0m"
    echo -e "  wttr [OPTIONS]"
    echo -e "  wttr CITY [FORMAT] [LANG]"
    echo
    echo -e "\033[1mOptions:\033[0m"
    echo -e "  \033[1m-A, --about\033[0m           About"
    echo -e "  \033[1m-c, --city CITY\033[0m       Specify the city or location to query"
    echo -e "  \033[1m-f, --format NUMBER\033[0m   Specify output format (number 1-4 or placeholders)"
    echo -e "  \033[1m-h, --help\033[0m            Display this help information"
    echo -e "  \033[1m-l, --lang LANGUAGE\033[0m   Set language (zh-cn/en-us)"
    echo -e "  \033[1m-r, --remove\033[0m          Remove configuration files"
    echo -e "  \033[1m--sdef CITY\033[0m           Set default city for future queries"
    echo -e "  \033[1m--tmux \033[0m               Supports tmux"
    echo -e "  \033[1m-v2\033[0m                   Use v2.wttr.in API endpoint"
    echo -e "  \033[1m-v3\033[0m                   Use v3.wttr.in API endpoint"
    echo -e "  \033[1m-v, --version\033[0m         Show current version"
    echo -e "  \033[1m-V, --view [0|1|2]\033[0m    Set the view mode for weather display"
    echo
    echo -e "\033[1mView Modes:\033[0m"
    echo -e "  \033[1m--view 0\033[0m:             Only current weather"
    echo -e "  \033[1m--view 1\033[0m:             Current weather + today's forecast"
    echo -e "  \033[1m--view 2\033[0m:             Current weather + today's + tomorrow's forecast"
    echo
    echo -e "\033[1mExamples:\033[0m"
    echo -e "  wttr Beijing          # Get weather for Beijing with default format"
    echo -e "  wttr -c Shanghai -v2  # Use v2 API for Shanghai weather"
    echo -e "  wttr --view 0         # Get single-line weather for default city"
    echo -e "  wttr -f 3             # Use built-in format number 3"
    echo -e "  wttr -l zh-cn         # Get weather in English"
    echo -e "  wttr --sdef Beijing   # Set Beijing as your default city"
    echo -e "  wttr                  # Get weather for your default city"
    echo
    echo -e "\033[1mConfiguration File Location:\033[0m"
    echo -e "  \${XDG_CONFIG_HOME:-\${HOME}/.config}/wttr/default-city.txt"
    echo
    echo -e "\033[1mSpecial URLs:\033[0m"
    echo -e "  curl https://wttr.in/:help   # show wttr.in page"
    echo
    echo -e "Any bugs? Any suggestions? Contact information at https://github.com/hahapigs/work-theme"
}

# Get default city (without auto-creating directory)
get_default_city() {
    if [[ -f "$DEFAULT_CITY_FILE" ]]; then
        local city=$(head -n 1 "$DEFAULT_CITY_FILE" | tr -d '[:space:]')
        if [[ -n "$city" ]]; then
            echo "$city"
            return
        fi
    fi
    echo -e "\033[31mError: Default city not set, please use --sdef to set a default city first\033[0m" >&2
    exit 1
}

# Set default city (only creates directory at this time)
set_default_city() {
    mkdir -p "$CONFIG_DIR"
    echo "$1" > "$DEFAULT_CITY_FILE"
    echo -e "Default city set to: \033[1m$1\033[0m"
    echo -e "Configuration file location: \033[1m$DEFAULT_CITY_FILE\033[0m"
}

# Validate language parameter
validate_lang() {
    case "$1" in
        zh-cn|en-us) return 0 ;;
        *)
            echo -e "Error: Unsupported language \033[1m$1\033[0m, only zh-cn or en-us are supported" >&2
            exit 1
        ;;
    esac
}

# Validate view parameter
validate_view() {
    case "$1" in
        0|1|2) return 0 ;;
        *)
            echo -e "Error: Invalid view parameter \033[1m$1\033[0m, only 0/1/2 are supported" >&2
            exit 1
        ;;
    esac
}

# Validate format placeholders
validate_format() {
    local format="$1"

    # Validate numeric format options (1-4)
    if [[ "$format" =~ ^[1-4]$ ]]; then
        return 0
    fi

    echo -e "Error: Format must be \033[1m1/2/3/4\033[0m" >&2
    exit 1
}

# Remove default configuration
remove() {
    if [[ -d "$CONFIG_DIR" ]]; then
        rm -rf "$CONFIG_DIR"
        echo -e "\033[1mConfiguration directory removed: $CONFIG_DIR\033[0m"
    else
        echo -e "\033[1mConfiguration directory not found\033[0m"
    fi
    echo -e "\033[32mUninstallation complete\033[0m"
    exit 0
}

# Parameter parsing
city=""
view=""
format=""
lang=""
__tmux=""
url="$URL_v1"  # Default to standard API
positional=()

while [[ $# -gt 0 ]]; do
    case "$1" in
        -A|--about)
            command -v lolcat &>/dev/null && show_about | lolcat || show_about
            exit 0
        ;;
        -h|--help)
            show_help
            exit 0
        ;;
        -v|--version)
            echo -e "wttr version is: $wttr_ver"
            exit 0
        ;;
        -c|--city)
            if [[ -z "$2" ]]; then
                echo -e "Error: Please provide a city name" >&2
                show_help
                exit 1
            fi
            city="$2"
            shift 2
        ;;
        -V|--view)
            if [[ -z "$2" ]]; then
                echo -e "Error: Please provide a view parameter" >&2
                show_help
                exit 1
            fi
            validate_view "$2"
            view="$2"
            shift 2
        ;;
        -f|--format)
            if [[ -z "$2" ]]; then
                echo -e "Error: Please provide a format parameter" >&2
                show_help
                exit 1
            fi
            validate_format "$2"
            format="$2"
            shift 2
        ;;
        -l|--lang)
            if [[ -z "$2" ]]; then
                echo -e "Error: Please provide a language parameter" >&2
                show_help
                exit 1
            fi
            validate_lang "$2"
            lang="$2"
            shift 2
        ;;
        -v2)
            url="$URL_v2"
            shift
        ;;
        -v3)
            url="$URL_v3"
            shift
        ;;
        --sdef)
            if [[ -z "$2" ]]; then
                echo -e "Error: Please provide a default city name" >&2
                show_help
                exit 1
            fi
            set_default_city "$2"
            exit 0
        ;;
        --tmux)
            __tmux=true
            format=3
            shift
        ;;
        -r|--remove)
            remove
        ;;
        -*)
            echo -e "Error: Unknown option \033[1m$1\033[0m" >&2
            show_help
            exit 1
        ;;
        *)
            positional+=("$1")
            shift
        ;;
    esac
done

# Process positional parameters
if [[ ${#positional[@]} -gt 0 ]]; then
    if [[ -z "$city" ]]; then
        city="${positional[0]}"
    else
        echo -e "Error: Excess parameters '${positional[*]}'" >&2
        show_help
        exit 1
    fi
fi

# Get default city (if not specified and needed)
if [[ -z "$city" ]]; then
    city=$(get_default_city)
    city=${city// /+}
    city=${city//[^a-zA-Z0-9+]}
fi

# Build API request parameters array
params=()
[[ -n "$view" ]] && params=("$view")              # Add view parameter if specified
[[ -n "$format" ]] && params+=("format=$format")  # Add format parameter if specified
[[ -n "$lang" ]] && params+=("lang=$lang")        # Add language parameter if specified
params+=("F")  # Add 'F' as a default parameter (Fahrenheit to Celsius conversion)

# Call the API
[[ $__tmux ]] && curl -f -s -m 2 ${url}/${city}?$(IFS='&'; echo "${params[*]}") && exit 0
curl -s ${url}/${city}?$(IFS='&'; echo "${params[*]}")
